/* Wedding Shopping - Top Down approach*/

// this code is based on the recursive backtracking approach

// code based on the textbook code

#include <algorithm>
#include <cstdio>
#include <cstring>
using namespace std;

int M = 20, 
    C = 3,
    price[25][25] =              // price[g (<= 20)][model (<= 20)]
        { { 3, 4, 6, 8} ,
          { 2, 5, 10 },  
          { 4, 1, 3, 5, 5 }
        };                

int memo[210][25];        // dp table memo[money (<= 200)][g (<= 20)]

int shop(int money, int g) {

    if (money < 0)      // fail, return a large negative number
        return -1000000000;

    if (g == C)         // bought last garment, done
        return M - money;

    if (memo[money][g] != -1) // value calculated before
        return memo[money][g];

    int ans = -1;   // start with a -1 as all prices are non negative

    for (int model = 1; model <= price[g][0]; model++)  {    // try all models
        int tmp = shop(money - price[g][model], g + 1);
        ans = tmp > ans ? tmp : ans;
    }

    return memo[money][g] = ans; // assign ans to table + return it
}


int main() {           
    int i, j, score;

        memset(memo, -1, sizeof memo);                 // initialize DP memo table
        
        score = shop(M, 0);                            // start the top-down DP
        
        if (score < 0) printf("no solution\n");
        else           printf("%d\n", score);
 

    return 0;
} 
